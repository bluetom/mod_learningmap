{"version":3,"file":"placestore.min.js","sources":["../src/placestore.js"],"sourcesContent":["let placestore = {\r\n    version: 2024072201,\r\n    id: 0,\r\n    places: [],\r\n    paths: [],\r\n    startingplaces: [],\r\n    targetplaces: [],\r\n    placecolor: '#c01c28',\r\n    strokecolor: '#ffffff',\r\n    strokeopacity: 1,\r\n    textcolor: '#ffffff',\r\n    visitedcolor: '#26a269',\r\n    height: 100,\r\n    width: 800,\r\n    hidepaths: false,\r\n    mapid: '',\r\n    usecheckmark: false,\r\n    editmode: true,\r\n    pulse: false,\r\n    hover: false,\r\n    showall: false,\r\n    showtext: false,\r\n    slicemode: false,\r\n    showwaygone: false,\r\n    /**\r\n     * Loads attributes from JSON into placestore\r\n     * @param {*} json\r\n     */\r\n    loadJSON: function(json) {\r\n        try {\r\n            let fromjson = JSON.parse(json);\r\n            if (fromjson.textcolor === null) {\r\n                fromjson.textcolor = fromjson.strokecolor;\r\n            }\r\n            Object.assign(this, fromjson);\r\n            // eslint-disable-next-line no-empty\r\n        } catch { }\r\n        // Update version (only relevant if learning map is saved)\r\n        this.version = 2024072201;\r\n    },\r\n    /**\r\n     * Returns placestore as a JSON string ()\r\n     * @returns {string}\r\n     */\r\n    buildJSON: function() {\r\n        return JSON.stringify(this.getPlacestore());\r\n    },\r\n    /**\r\n     * Adds a place. If it is the only place, it is set as starting place\r\n     * @param {*} id id of the place\r\n     * @param {*} linkId id of the corresponding link\r\n     * @param {*} linkedActivity course module id of linked activity\r\n     */\r\n    addPlace: function(id, linkId, linkedActivity = null) {\r\n        this.places.push({\r\n            id: id,\r\n            linkId: linkId,\r\n            linkedActivity: linkedActivity,\r\n            placecolor: null,\r\n            visitedcolor: null\r\n        });\r\n        if (this.places.length == 1) {\r\n            this.addStartingPlace(id);\r\n        }\r\n        this.id++;\r\n    },\r\n    /**\r\n     * Removes a place\r\n     * @param {*} id id of the place\r\n     */\r\n    removePlace: function(id) {\r\n        this.removeStartingPlace(id);\r\n        this.removeTargetPlace(id);\r\n        this.places = this.places.filter(\r\n            function(p) {\r\n                return p.id != id;\r\n            }\r\n        );\r\n    },\r\n    /**\r\n     * Adds a place to the array of starting places\r\n     * @param {*} id id of the place\r\n     */\r\n    addStartingPlace: function(id) {\r\n        this.startingplaces.push(id);\r\n    },\r\n    /**\r\n     * Removes a place from the array of starting places\r\n     * @param {*} id id of the place\r\n     */\r\n    removeStartingPlace: function(id) {\r\n        this.startingplaces = this.startingplaces.filter(\r\n            function(e) {\r\n                return e != id;\r\n            }\r\n        );\r\n    },\r\n    /**\r\n     * Returns whether a place is in the array of starting places\r\n     * @param {*} id id of the place\r\n     * @returns {boolean}\r\n     */\r\n    isStartingPlace: function(id) {\r\n        return this.startingplaces.includes(id);\r\n    },\r\n    /**\r\n     * Adds a place to the array of target places\r\n     * @param {*} id id of the place\r\n     */\r\n    addTargetPlace: function(id) {\r\n        this.targetplaces.push(id);\r\n    },\r\n    /**\r\n     * Removes a place from the array of target places\r\n     * @param {*} id id of the place\r\n     */\r\n    removeTargetPlace: function(id) {\r\n        this.targetplaces = this.targetplaces.filter(\r\n            function(e) {\r\n                return e != id;\r\n            }\r\n        );\r\n    },\r\n    /**\r\n     * Returns whether a place is in the array of target places\r\n     * @param {number} id id of the place\r\n     * @returns {boolean}\r\n     */\r\n    isTargetPlace: function(id) {\r\n        return this.targetplaces.includes(id);\r\n    },\r\n    /**\r\n     * Adds a path between two places\r\n     * @param {*} pid id of the path\r\n     * @param {*} fid id of the first place\r\n     * @param {*} sid id of the second place\r\n     */\r\n    addPath: function(pid, fid, sid) {\r\n        this.paths.push({\r\n            id: pid,\r\n            fid: fid,\r\n            sid: sid,\r\n            strokecolor: null,\r\n            strokedasharray: null,\r\n            hidepath: null\r\n        });\r\n    },\r\n    /**\r\n     * Removes a path\r\n     * @param {*} id id of the place\r\n     */\r\n    removePath: function(id) {\r\n        this.paths = this.paths.filter(\r\n            function(p) {\r\n                return p.id != id;\r\n            }\r\n        );\r\n    },\r\n    /**\r\n     * Returns an array of paths touching a place\r\n     * @param {*} id id of the place\r\n     * @returns {array}\r\n     */\r\n    getTouchingPaths: function(id) {\r\n        return this.paths.filter(\r\n            function(p) {\r\n                return p.fid == id || p.sid == id;\r\n            }\r\n        );\r\n    },\r\n    /**\r\n     * Returns the course module id linked to a place\r\n     * @param {*} id id of the place\r\n     * @returns {number} id of the linked course module\r\n     */\r\n    getActivityId: function(id) {\r\n        let place = this.places.filter(\r\n            function(e) {\r\n                return id == e.id;\r\n            }\r\n        );\r\n        if (place.length > 0) {\r\n            return place[0].linkedActivity;\r\n        } else {\r\n            return null;\r\n        }\r\n    },\r\n    /**\r\n     * Sets the id of the linked course module\r\n     * @param {*} id id of the place\r\n     * @param {*} linkedActivity course module id\r\n     */\r\n    setActivityId: function(id, linkedActivity) {\r\n        let place = this.places.filter(\r\n            function(e) {\r\n                return id == e.id;\r\n            }\r\n        );\r\n        if (place.length > 0) {\r\n            place[0].linkedActivity = linkedActivity;\r\n        }\r\n    },\r\n    /**\r\n     * Sets the color of 'stroke', 'place' or 'visited'\r\n     * @param {*} type type of the color\r\n     * @param {*} color color in hex format\r\n     */\r\n    setColor: function(type, color) {\r\n        switch (type) {\r\n            case 'stroke':\r\n                this.strokecolor = color;\r\n                break;\r\n            case 'place':\r\n                this.placecolor = color;\r\n                break;\r\n            case 'visited':\r\n                this.visitedcolor = color;\r\n                break;\r\n            case 'text':\r\n                this.textcolor = color;\r\n                break;\r\n        }\r\n    },\r\n    /**\r\n     * Gets the color of 'stroke', 'place' or 'visited'\r\n     * @param {*} type type of the color\r\n     * @returns {string} color in hex format\r\n     */\r\n    getColor: function(type) {\r\n        switch (type) {\r\n            case 'stroke':\r\n                return this.strokecolor;\r\n            case 'place':\r\n                return this.placecolor;\r\n            case 'visited':\r\n                return this.visitedcolor;\r\n            case 'text':\r\n                return this.textcolor;\r\n        }\r\n        return null;\r\n    },\r\n    /**\r\n     * Returns the current id\r\n     * @returns {number}\r\n     */\r\n    getId: function() {\r\n        return this.id;\r\n    },\r\n    /**\r\n     * Sets the dimensions of the background image\r\n     * @param {*} width\r\n     * @param {*} height\r\n     */\r\n    setBackgroundDimensions: function(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n    },\r\n    /**\r\n     * Returns all paths starting at a place\r\n     * @param {*} id id of the place\r\n     * @returns {array}\r\n     */\r\n    getPathsWithFid: function(id) {\r\n        return this.paths.filter(function(p) {\r\n            return p.fid == id;\r\n        });\r\n    },\r\n    /**\r\n     * Returns all paths ending at a place\r\n     * @param {*} id id of the place\r\n     * @returns {array}\r\n     */\r\n    getPathsWithSid: function(id) {\r\n        return this.paths.filter(function(p) {\r\n            return p.sid == id;\r\n        });\r\n    },\r\n    /**\r\n     * Returns the attributes of placestore\r\n     * @returns {object}\r\n     */\r\n    getPlacestore: function() {\r\n        return {\r\n            id: this.id,\r\n            places: this.places,\r\n            paths: this.paths,\r\n            startingplaces: this.startingplaces,\r\n            targetplaces: this.targetplaces,\r\n            placecolor: this.placecolor,\r\n            strokecolor: this.strokecolor,\r\n            strokeopacity: this.strokeopacity,\r\n            textcolor: this.textcolor,\r\n            visitedcolor: this.visitedcolor,\r\n            height: this.height,\r\n            width: this.width,\r\n            hidepaths: this.hidepaths,\r\n            mapid: this.mapid,\r\n            usecheckmark: this.usecheckmark,\r\n            editmode: this.editmode,\r\n            version: this.version,\r\n            pulse: this.pulse,\r\n            hover: this.hover,\r\n            showall: this.showall,\r\n            showtext: this.showtext,\r\n            slicemode: this.slicemode,\r\n            showwaygone: this.showwaygone,\r\n        };\r\n    },\r\n    /**\r\n     * Sets hidepaths attribute\r\n     * @param {boolean} value\r\n     */\r\n    setHidePaths: function(value) {\r\n        this.hidepaths = value;\r\n    },\r\n    /**\r\n     * Returns the value of hidepaths attribute\r\n     * @returns {boolean}\r\n     */\r\n    getHidePaths: function() {\r\n        return this.hidepaths;\r\n    },\r\n    /**\r\n     * Sets pulse attribute\r\n     * @param {boolean} value\r\n     */\r\n    setPulse: function(value) {\r\n        this.pulse = value;\r\n    },\r\n    /**\r\n     * Returns the value of pulse attribute\r\n     * @returns {boolean}\r\n     */\r\n    getPulse: function() {\r\n        return this.pulse;\r\n    },\r\n    /**\r\n     * Sets hover attribute\r\n     * @param {boolean} value\r\n     */\r\n    setHover: function(value) {\r\n        this.hover = value;\r\n    },\r\n    /**\r\n     * Returns the value of hover attribute\r\n     * @returns {boolean}\r\n     */\r\n    getHover: function() {\r\n        return this.hover;\r\n    },\r\n    /**\r\n     * Sets showall attribute\r\n     * @param {boolean} value\r\n     */\r\n    setShowall: function(value) {\r\n        this.showall = value;\r\n    },\r\n    /**\r\n     * Returns the value of showall attribute\r\n     * @returns {boolean}\r\n     */\r\n    getShowall: function() {\r\n        return this.showall;\r\n    },\r\n    /**\r\n     * Returns the mapid\r\n     * @returns {string}\r\n     */\r\n    getMapid: function() {\r\n        return this.mapid;\r\n    },\r\n    /**\r\n     * Returns the value of usecheckmark attribute\r\n     * @returns {boolean}\r\n     */\r\n    getUseCheckmark: function() {\r\n        return this.usecheckmark;\r\n    },\r\n    /**\r\n     * Sets the value of usecheckmark attribute\r\n     * @param {boolean} value\r\n     */\r\n    setUseCheckmark: function(value) {\r\n        this.usecheckmark = value;\r\n    },\r\n    /**\r\n     * Returns an array with all activity ids\r\n     * @returns {array}\r\n     */\r\n    getAllActivities: function() {\r\n        let activities = [];\r\n        this.places.forEach(function(p) {\r\n            if (p.linkedActivity) {\r\n                activities.push(p.linkedActivity);\r\n            }\r\n        });\r\n        return activities;\r\n    },\r\n    /**\r\n     * Sets stroke opacity\r\n     * @param {number} value\r\n     */\r\n    setStrokeOpacity: function(value) {\r\n        this.strokeopacity = value;\r\n    },\r\n    /**\r\n     * Returns the current stroke opacity\r\n     * @returns {number}\r\n     */\r\n    getStrokeOpacity: function() {\r\n        return this.strokeopacity;\r\n    },\r\n    /**\r\n     * Sets stroke opacity to 0\r\n     * @param {number} value\r\n     */\r\n    setHideStroke: function(value) {\r\n        this.strokeopacity = (value ? 0 : 1);\r\n    },\r\n    /**\r\n     * Returns the current stroke opacity\r\n     * @returns {number}\r\n     */\r\n    getHideStroke: function() {\r\n        return this.strokeopacity < 1;\r\n    },\r\n    /**\r\n     * Returns the value of showtext attribute\r\n     * @returns {boolean}\r\n     */\r\n    getShowText: function() {\r\n        return this.showtext;\r\n    },\r\n    /**\r\n     * Sets the value of showtext attribute\r\n     * @param {boolean} value\r\n     */\r\n    setShowText: function(value) {\r\n        this.showtext = value;\r\n    },\r\n    /**\r\n     * Returns an array with all place identifiers\r\n     * @returns {array}\r\n     */\r\n     getPlaces: function() {\r\n        return this.places;\r\n    },\r\n    /**\r\n     * Returns if slicemode is enabled\r\n     * @returns {boolean}\r\n     */\r\n    getSliceMode: function() {\r\n        return this.slicemode;\r\n    },\r\n    /**\r\n     * Sets state of slicemode\r\n     * @param {boolean} value\r\n     */\r\n    setSliceMode: function(value) {\r\n        this.slicemode = value;\r\n    },\r\n    /**\r\n     * Returns if showwaygone is enabled\r\n     * @returns {boolean}\r\n     */\r\n    getShowWayGone: function() {\r\n        return this.showwaygone;\r\n    },\r\n    /**\r\n     * Sets state of showwaygone\r\n     * @param {boolean} value\r\n     */\r\n    setShowWayGone: function(value) {\r\n        this.showwaygone = value;\r\n    },\r\n};\r\n\r\nexport default placestore;\r\n"],"names":["placestore","version","id","places","paths","startingplaces","targetplaces","placecolor","strokecolor","strokeopacity","textcolor","visitedcolor","height","width","hidepaths","mapid","usecheckmark","editmode","pulse","hover","showall","showtext","slicemode","showwaygone","loadJSON","json","fromjson","JSON","parse","Object","assign","this","buildJSON","stringify","getPlacestore","addPlace","linkId","linkedActivity","push","length","addStartingPlace","removePlace","removeStartingPlace","removeTargetPlace","filter","p","e","isStartingPlace","includes","addTargetPlace","isTargetPlace","addPath","pid","fid","sid","strokedasharray","hidepath","removePath","getTouchingPaths","getActivityId","place","setActivityId","setColor","type","color","getColor","getId","setBackgroundDimensions","getPathsWithFid","getPathsWithSid","setHidePaths","value","getHidePaths","setPulse","getPulse","setHover","getHover","setShowall","getShowall","getMapid","getUseCheckmark","setUseCheckmark","getAllActivities","activities","forEach","setStrokeOpacity","getStrokeOpacity","setHideStroke","getHideStroke","getShowText","setShowText","getPlaces","getSliceMode","setSliceMode","getShowWayGone","setShowWayGone"],"mappings":"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"}
{"version":3,"file":"learningmap.min.js","sources":["../src/learningmap.js"],"sourcesContent":["import {exception as displayException} from 'core/notification';\r\nimport Templates from 'core/templates';\r\nimport placestore from 'mod_learningmap/placestore';\r\n\r\nconst circleRadius = 5;\r\n\r\n// Constants for updatePathDeclaration.\r\nconst targetPoints = {\r\n    firstPoint: 1,\r\n    secondPoint: 2,\r\n    bezierPoint: 3,\r\n};\r\n\r\nconst pathTypes = {\r\n    line: 1,\r\n    quadraticbezier: 2,\r\n};\r\n\r\nexport const init = () => {\r\n    // Load the needed template on startup for better execution speed.\r\n    Templates.prefetchTemplates(['mod_learningmap/cssskeleton']);\r\n\r\n    // Variable for storing the mouse offset\r\n    var offset;\r\n\r\n    // Variable for draggable element\r\n    var dragel;\r\n\r\n    // Variables for storing the paths that need update of the first or\r\n    // the second coordinates.\r\n    var pathsToUpdateFirstPoint, pathsToUpdateSecondPoint;\r\n\r\n    // Variables for handling the currently selected elements\r\n    var selectedElement = null,\r\n        firstPlace = null,\r\n        secondPlace = null,\r\n        lastTarget = null;\r\n\r\n    // Variable for storing the selected element for the activity selector\r\n    var elementForActivitySelector = null;\r\n\r\n    // Variables for simulating double click on touch devices, set when the\r\n    // corresponding events are handled\r\n    var touchstart = false;\r\n    var touchend = false;\r\n    // Counter for touchmove events\r\n    var touchmove = 0;\r\n\r\n    // DOM nodes for the editor\r\n    let mapdiv = document.getElementById('learningmap-editor-map');\r\n    let code = document.getElementById('id_svgcode');\r\n\r\n    // DOM nodes for the activity selector\r\n    let activitySetting = document.getElementById('learningmap-activity-setting');\r\n    let activitySelector = document.getElementById('learningmap-activity-selector');\r\n    let activityStarting = document.getElementById('learningmap-activity-starting');\r\n    let activityTarget = document.getElementById('learningmap-activity-target');\r\n    let activityHiddenWarning = document.getElementById('learningmap-activity-hidden-warning');\r\n    let advancedSettingsIcon = document.getElementById('learningmap-advanced-settings-icon');\r\n\r\n    // Hide tree view as there is no preview file we can attach to\r\n    let treeView = document.querySelector('.fp-viewbar .fp-vb-tree');\r\n    if (treeView) {\r\n        treeView.setAttribute('style', 'display: none;');\r\n    }\r\n\r\n    // Trigger click event on icon view to ensure that tree view is not active.\r\n    let iconView = document.querySelector('.fp-viewbar .fp-vb-icons');\r\n    if (iconView) {\r\n        // Handle possible delay in form loading.\r\n        setTimeout(() => {\r\n            iconView.dispatchEvent(new Event('click'));\r\n        }, 1000);\r\n    }\r\n\r\n    // Attach listeners to the activity selector\r\n    if (activitySelector) {\r\n        // Show places that are not linked to an activity\r\n        activitySelector.addEventListener('change', function() {\r\n            placestore.setActivityId(elementForActivitySelector, activitySelector.value);\r\n            if (activitySelector.value) {\r\n                let text = document.getElementById('text' + elementForActivitySelector);\r\n                if (text) {\r\n                    text.textContent = activitySelector.querySelector('option[value=\"' + activitySelector.value + '\"]').textContent;\r\n                }\r\n                let title = document.getElementById('title' + elementForActivitySelector);\r\n                if (title) {\r\n                    title.textContent =\r\n                        activitySelector.querySelector('option[value=\"' + activitySelector.value + '\"]').textContent;\r\n                }\r\n                document.getElementById(elementForActivitySelector).classList.remove('learningmap-emptyplace');\r\n            } else {\r\n                document.getElementById(elementForActivitySelector).classList.add('learningmap-emptyplace');\r\n            }\r\n            updateActivities();\r\n            updateCode();\r\n        });\r\n        // Add / remove a place to the starting places array\r\n        activityStarting.addEventListener('change', function() {\r\n            if (activityStarting.checked) {\r\n                placestore.addStartingPlace(elementForActivitySelector);\r\n            } else {\r\n                placestore.removeStartingPlace(elementForActivitySelector);\r\n            }\r\n            updateCode();\r\n        });\r\n        // Add / remove a place to the target places array\r\n        activityTarget.addEventListener('change', function() {\r\n            if (activityTarget.checked) {\r\n                placestore.addTargetPlace(elementForActivitySelector);\r\n                document.getElementById(elementForActivitySelector).classList.add('learningmap-targetplace');\r\n            } else {\r\n                placestore.removeTargetPlace(elementForActivitySelector);\r\n                document.getElementById(elementForActivitySelector).classList.remove('learningmap-targetplace');\r\n            }\r\n            updateCode();\r\n        });\r\n    }\r\n\r\n    // Load placestore values from the hidden input field\r\n    let placestoreInput = document.getElementsByName('placestore')[0];\r\n    if (placestoreInput) {\r\n        placestore.loadJSON(placestoreInput.value);\r\n    }\r\n\r\n    // Mark all activities in the placestore as \"used\".\r\n    updateActivities();\r\n\r\n    // Attach listeners to the advanced settings div\r\n    if (advancedSettingsIcon) {\r\n        let advancedSettings = document.getElementById('learningmap-advanced-settings');\r\n        advancedSettingsIcon.addEventListener('click', function() {\r\n            if (advancedSettings.getAttribute('hidden') === null) {\r\n                hideAdvancedSettings();\r\n            } else {\r\n                advancedSettings.removeAttribute('hidden');\r\n                hideContextMenu();\r\n            }\r\n        });\r\n        let advancedSettingsClose = document.getElementById('learningmap-advanced-settings-close');\r\n        if (advancedSettingsClose) {\r\n            advancedSettingsClose.addEventListener('click', function() {\r\n                advancedSettings.setAttribute('hidden', '');\r\n            });\r\n        }\r\n\r\n        advancedSettingsLogic('hidepaths', placestore.getHidePaths, placestore.setHidePaths);\r\n        advancedSettingsLogic('usecheckmark', placestore.getUseCheckmark, placestore.setUseCheckmark);\r\n        advancedSettingsLogic('hover', placestore.getHover, placestore.setHover);\r\n        advancedSettingsLogic('pulse', placestore.getPulse, placestore.setPulse);\r\n        advancedSettingsLogic('showall', placestore.getShowall, placestore.setShowall);\r\n        advancedSettingsLogic('hidestroke', placestore.getHideStroke, placestore.setHideStroke);\r\n        advancedSettingsLogic('showtext', placestore.getShowText, placestore.setShowText, fixPlaceLabels);\r\n        advancedSettingsLogic('slicemode', placestore.getSliceMode, placestore.setSliceMode);\r\n        advancedSettingsLogic('showwaygone', placestore.getShowWayGone, placestore.setShowWayGone);\r\n    }\r\n\r\n    // Attach listener to the color choosers\r\n    colorChooserLogic('stroke', 'text');\r\n    colorChooserLogic('place');\r\n    colorChooserLogic('visited');\r\n\r\n    // Get SVG code from the (hidden) textarea field\r\n    if (code && mapdiv) {\r\n        mapdiv.innerHTML = code.value;\r\n    }\r\n    // Reload background image to get the correct width and height values\r\n    refreshBackgroundImage();\r\n    registerBackgroundListener();\r\n    updateCode();\r\n\r\n    // Enable dragging of places\r\n    let svg = document.getElementById('learningmap-svgmap-' + placestore.getMapid());\r\n    makeDraggable(svg);\r\n\r\n    // Refresh stylesheet values from placestore\r\n    updateCSS();\r\n\r\n    // Add listeners for clicking and context menu\r\n    if (mapdiv) {\r\n        mapdiv.addEventListener('dblclick', dblclickHandler);\r\n        mapdiv.addEventListener('click', clickHandler);\r\n\r\n        mapdiv.addEventListener('contextmenu', function(e) {\r\n            e.preventDefault();\r\n            showContextMenu(e);\r\n        }, false);\r\n    }\r\n    /**\r\n     * Shows the context menu at the current mouse position\r\n     * @param {*} e\r\n     */\r\n    function showContextMenu(e) {\r\n        unselectAll();\r\n        hideAdvancedSettings();\r\n        // Check for the existence of the target (could have vanished since the event started).\r\n        if (activitySetting && document.getElementById(e.target.id) !== null) {\r\n            if (e.touches) {\r\n                e = e.touches[0];\r\n            }\r\n            if (e.target.classList.contains('learningmap-place')) {\r\n                e.target.classList.add('learningmap-selected-activity-selector');\r\n                let activityId = placestore.getActivityId(e.target.id);\r\n                let scalingFactor = mapdiv.clientWidth / 800;\r\n                activitySetting.style.setProperty('--pos-x', e.target.cx.baseVal.value * scalingFactor + 'px');\r\n                activitySetting.style.setProperty('--pos-y', e.target.cy.baseVal.value * scalingFactor + 'px');\r\n                activitySetting.style.setProperty('--map-width', mapdiv.clientWidth + 'px');\r\n                activitySetting.style.setProperty('--map-height', mapdiv.clientHeight + 'px');\r\n                activitySetting.style.display = 'block';\r\n                document.getElementById('learningmap-activity-selector').value = activityId;\r\n                document.getElementById('learningmap-activity-starting').checked = placestore.isStartingPlace(e.target.id);\r\n                document.getElementById('learningmap-activity-target').checked = placestore.isTargetPlace(e.target.id);\r\n                elementForActivitySelector = e.target.id;\r\n                updateActivities();\r\n            } else {\r\n                hideContextMenu();\r\n                hideAdvancedSettings();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hides the context menu\r\n     */\r\n    function hideContextMenu() {\r\n        let e = document.getElementById(elementForActivitySelector);\r\n        if (e) {\r\n            e.classList.remove('learningmap-selected-activity-selector');\r\n        }\r\n        activitySetting.style.display = 'none';\r\n    }\r\n\r\n    let backgroundfileNode = document.getElementById('id_backgroundfile_fieldset');\r\n    if (backgroundfileNode) {\r\n        let observer = new MutationObserver(refreshBackgroundImage);\r\n        observer.observe(backgroundfileNode, {attributes: true, childList: true, subtree: true});\r\n    }\r\n\r\n    /**\r\n     * Helper function for getting the right coordinates from the mouse\r\n     * @param {*} evt\r\n     * @returns {object}\r\n     */\r\n    function getMousePosition(evt) {\r\n        if (evt.touches) {\r\n            evt = evt.touches[0];\r\n        }\r\n        return transformCoordinates(evt.clientX, evt.clientY);\r\n    }\r\n\r\n    /**\r\n     * Transforms client coordinates to SVG coordinates\r\n     * @param {number} x x coordinate to transform\r\n     * @param {number} y y coordinate to transform\r\n     * @returns {object} Object containing transformed x and y coordinate\r\n     */\r\n    function transformCoordinates(x, y) {\r\n        var CTM = dragel.getScreenCTM();\r\n        return {\r\n            x: (x - CTM.e) / CTM.a,\r\n            y: (y - CTM.f) / CTM.d\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Enables dragging on an DOM node\r\n     * @param {*} el\r\n     */\r\n    function makeDraggable(el) {\r\n        dragel = el;\r\n        if (el) {\r\n            el.addEventListener('mousedown', startDrag);\r\n            el.addEventListener('mousemove', drag);\r\n            el.addEventListener('mouseup', endDrag);\r\n            el.addEventListener('mouseleave', endDrag);\r\n            el.addEventListener('touchstart', startTouch);\r\n            el.addEventListener('touchmove', drag);\r\n            el.addEventListener('touchend', endTouch);\r\n            el.addEventListener('touchleave', endTouch);\r\n            el.addEventListener('touchcancel', endTouch);\r\n        }\r\n\r\n        /**\r\n         * Function called whenn dragging starts.\r\n         * @param {*} evt\r\n         */\r\n        function startDrag(evt) {\r\n            if (evt.cancelable) {\r\n                evt.preventDefault();\r\n            }\r\n            pathsToUpdateFirstPoint = [];\r\n            pathsToUpdateSecondPoint = [];\r\n            if (evt.target.classList.contains('learningmap-draggable')) {\r\n                selectedElement = evt.target;\r\n                offset = getMousePosition(evt);\r\n                offset.x -= parseInt(selectedElement.getAttributeNS(null, \"cx\"));\r\n                offset.y -= parseInt(selectedElement.getAttributeNS(null, \"cy\"));\r\n                // Get paths that need to be updated.\r\n                pathsToUpdateFirstPoint = placestore.getPathsWithFid(selectedElement.id);\r\n                pathsToUpdateSecondPoint = placestore.getPathsWithSid(selectedElement.id);\r\n            } else if (evt.target.nodeName == 'text') {\r\n                selectedElement = evt.target;\r\n                let place = selectedElement.parentNode.querySelector('.learningmap-place');\r\n                offset = getMousePosition(evt);\r\n                offset.x -= parseInt(selectedElement.getAttributeNS(null, \"dx\")) + place.cx.baseVal.value;\r\n                offset.y -= parseInt(selectedElement.getAttributeNS(null, \"dy\")) + place.cy.baseVal.value;\r\n            } else if (evt.target.nodeName == 'path') {\r\n                selectedElement = evt.target;\r\n                offset = getMousePosition(evt);\r\n                let pathPoint = transformCoordinates(evt.layerX, evt.layerY);\r\n                offset.x += pathPoint.x;\r\n                offset.y += pathPoint.y;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Function called during dragging. Continuously updates circles center coordinates and the\r\n         * coordinates of the touching paths.\r\n         * @param {*} evt\r\n         */\r\n        function drag(evt) {\r\n            if (evt.cancelable) {\r\n                evt.preventDefault();\r\n            }\r\n            // Count touchmove events\r\n            touchmove++;\r\n            if (selectedElement) {\r\n                var coord = getMousePosition(evt);\r\n                let cx = coord.x - offset.x;\r\n                let cy = coord.y - offset.y;\r\n                if (selectedElement.nodeName == 'text') {\r\n                    let place = selectedElement.parentNode.querySelector('.learningmap-place');\r\n                    // Calculate the delta from the current mouse position to the corresponding place.\r\n                    // coord: current mouse position\r\n                    // offset: delta from the mouse position to the coordinates of the text node\r\n                    let dx = coord.x - offset.x - place.cx.baseVal.value;\r\n                    let dy = coord.y - offset.y - place.cy.baseVal.value;\r\n                    selectedElement.setAttributeNS(null, \"dx\", dx);\r\n                    selectedElement.setAttributeNS(null, \"dy\", dy);\r\n                }\r\n                if (selectedElement.nodeName == 'path') {\r\n                    selectedElement.setAttribute(\r\n                        'd',\r\n                        updatePathDeclaration(selectedElement.getAttribute('d'), coord.x, coord.y, targetPoints.bezierPoint)\r\n                    );\r\n                }\r\n                if (selectedElement.nodeName == 'circle') {\r\n                    selectedElement.setAttributeNS(null, \"cx\", cx);\r\n                    selectedElement.setAttributeNS(null, \"cy\", cy);\r\n                    let textNode = document.getElementById('text' + selectedElement.id);\r\n                    if (textNode !== null) {\r\n                        textNode.setAttributeNS(null, 'x', cx);\r\n                        textNode.setAttributeNS(null, 'y', cy);\r\n                    }\r\n                    pathsToUpdateFirstPoint.forEach(function(path) {\r\n                        let pathNode = document.getElementById(path.id);\r\n                        if (pathNode !== null) {\r\n                            if (pathNode.nodeName == 'path') {\r\n                                pathNode.setAttribute(\r\n                                    'd',\r\n                                    updatePathDeclaration(pathNode.getAttribute('d'), cx, cy, targetPoints.firstPoint)\r\n                                );\r\n                            } else {\r\n                                pathNode.setAttribute('x1', cx);\r\n                                pathNode.setAttribute('y1', cy);\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    pathsToUpdateSecondPoint.forEach(function(path) {\r\n                        let pathNode = document.getElementById(path.id);\r\n                        if (pathNode !== null) {\r\n                            if (pathNode.nodeName == 'path') {\r\n                                pathNode.setAttribute(\r\n                                    'd',\r\n                                    updatePathDeclaration(pathNode.getAttribute('d'), cx, cy, targetPoints.secondPoint)\r\n                                );\r\n                            } else {\r\n                                pathNode.setAttribute('x2', cx);\r\n                                pathNode.setAttribute('y2', cy);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Function called when dragging ends.\r\n         * @param {*} evt\r\n         */\r\n        function endDrag(evt) {\r\n            if (evt.cancelable) {\r\n                evt.preventDefault();\r\n            }\r\n            selectedElement = null;\r\n            unselectAll();\r\n            updateCode();\r\n        }\r\n\r\n        /**\r\n         * Function called when touchstart event occurs.\r\n         * @param {*} evt\r\n         */\r\n        function startTouch(evt) {\r\n            if (evt.cancelable) {\r\n                evt.preventDefault();\r\n            }\r\n            if (\r\n                evt.target.classList.contains('learningmap-draggable') ||\r\n                evt.target.nodeName == 'text' ||\r\n                evt.target.nodeName == 'path'\r\n            ) {\r\n                if (!touchstart) {\r\n                    touchstart = true;\r\n                    touchmove = 0;\r\n                    touchend = false;\r\n                    setTimeout(\r\n                        (evt) => {\r\n                            if (touchmove < 3 && !touchend) {\r\n                                if (evt.touches) {\r\n                                    evt = evt.touches[0];\r\n                                }\r\n                                showContextMenu(evt);\r\n                            }\r\n                        },\r\n                        2000,\r\n                        evt\r\n                    );\r\n                    setTimeout(\r\n                        () => {\r\n                            touchstart = false;\r\n                        },\r\n                    300);\r\n                } else {\r\n                    dblclickHandler(evt);\r\n                    touchstart = false;\r\n                }\r\n                startDrag(evt);\r\n            } else {\r\n                if (!touchstart) {\r\n                    touchstart = true;\r\n                    touchend = false;\r\n                    touchmove = 0;\r\n                    setTimeout(\r\n                        () => {\r\n                            touchstart = false;\r\n                        },\r\n                    300);\r\n                } else {\r\n                    dblclickHandler(evt);\r\n                    touchstart = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Function called when touchend, touchleave or touchcancel event occurs.\r\n         * @param {*} evt\r\n         */\r\n        function endTouch(evt) {\r\n            selectedElement = null;\r\n            touchend = true;\r\n            // If there was only a small move (<3 move events), this also counts as a click.\r\n            if (touchmove < 3 && touchstart) {\r\n                clickHandler(evt);\r\n            } else {\r\n                endDrag(evt);\r\n            }\r\n            if (evt.cancelable) {\r\n                evt.preventDefault();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Updates the path declaration of lines and quadratic bezier curves setting one of the points.\r\n         * @param {string} oldDefinition SVG path definition string\r\n         * @param {number} targetX x coordinate of the point to set\r\n         * @param {number} targetY y coordinate of the point to set\r\n         * @param {number} targetP Which point to change (you can use the targetPoints constants here)\r\n         * @returns {string} Updated SVG path definition\r\n         */\r\n        function updatePathDeclaration(oldDefinition, targetX, targetY, targetP = targetPoints.firstPoint) {\r\n            let parts = oldDefinition.split(' ');\r\n            let fromX = 0;\r\n            let fromY = 0;\r\n            let toX = 0;\r\n            let toY = 0;\r\n            let bezierX = 0;\r\n            let bezierY = 0;\r\n            let pathType = pathTypes.line;\r\n\r\n            // The d attribute of an SVG path in a learning map can have two different formats (in this version):\r\n            // \"M x1 y1 L x2 y2\"        Line from x1, y1 to x2, y2\r\n            // \"M x1 y2 Q x3 y3 x2 y2\"  Quadratic bezier curve inside the triangle defined by x1, y1, x2, y2 and x3, y3.\r\n            for (let i = 0; i < parts.length; i++) {\r\n                // Every path contains the first point in that way.\r\n                if (parts[i] == 'M') {\r\n                    fromX = parseInt(parts[i + 1]);\r\n                    fromY = parseInt(parts[i + 2]);\r\n                    i += 2;\r\n                }\r\n                // This path is a direct line, so there are only two points in total.\r\n                if (parts[i] == 'L') {\r\n                    toX = parseInt(parts[i + 1]);\r\n                    toY = parseInt(parts[i + 2]);\r\n                    i += 2;\r\n                }\r\n                // This path is a bezier curve, there are three points in total.\r\n                if (parts[i] == 'Q') {\r\n                    bezierX = parseInt(parts[i + 1]);\r\n                    bezierY = parseInt(parts[i + 2]);\r\n                    toX = parseInt(parts[i + 3]);\r\n                    toY = parseInt(parts[i + 4]);\r\n                    i += 4;\r\n                    pathType = pathTypes.quadraticbezier;\r\n                }\r\n            }\r\n\r\n            switch (targetP) {\r\n                case targetPoints.firstPoint:\r\n                    fromX = targetX;\r\n                    fromY = targetY;\r\n                    break;\r\n                case targetPoints.secondPoint:\r\n                    toX = targetX;\r\n                    toY = targetY;\r\n                    break;\r\n                case targetPoints.bezierPoint:\r\n                    // Calculate the third triangle point for the bezier curve.\r\n                    bezierX = targetX * 2 - (fromX + toX) * 0.5;\r\n                    bezierY = targetY * 2 - (fromY + toY) * 0.5;\r\n                    pathType = pathTypes.quadraticbezier;\r\n                    break;\r\n            }\r\n\r\n            if (pathType == pathTypes.quadraticbezier) {\r\n                return 'M ' + fromX + ' ' + fromY + ' Q ' + bezierX + ' ' + bezierY + ', ' + toX + ' ' + toY;\r\n            } else {\r\n                return 'M ' + fromX + ' ' + fromY + ' L ' + toX + ' ' + toY;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the form fields for the SVG code and the placestore from the editor.\r\n     */\r\n    function updateCode() {\r\n        if (code && mapdiv) {\r\n            code.innerHTML = mapdiv.innerHTML;\r\n        }\r\n        if (placestoreInput) {\r\n            document.getElementsByName('placestore')[0].value = JSON.stringify(placestore.getPlacestore());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles double clicks on the map\r\n     * @param {*} event\r\n     */\r\n    function dblclickHandler(event) {\r\n        hideContextMenu();\r\n        hideAdvancedSettings();\r\n        unselectAll();\r\n        if (event.target.classList.contains('learningmap-mapcontainer') ||\r\n            event.target.classList.contains('learningmap-background-image')) {\r\n            addPlace(event);\r\n        } else if (event.target.classList.contains('learningmap-place')) {\r\n            if (lastTarget == event.target.id) {\r\n                lastTarget = null;\r\n                clickHandler(event);\r\n            } else {\r\n                removePlace(event);\r\n            }\r\n        } else if (event.target.classList.contains('learningmap-path')) {\r\n            removePath(event.target.id);\r\n        }\r\n        updateCode();\r\n    }\r\n\r\n    /**\r\n     * Returns an empty title tag with the given id.\r\n     * @param {*} id id for the title\r\n     * @returns {any}\r\n     */\r\n    function title(id) {\r\n        let title = document.createElementNS('http://www.w3.org/2000/svg', 'title');\r\n        title.setAttribute('id', id);\r\n        return title;\r\n    }\r\n\r\n    /**\r\n     * Returns an text tag with the given id.\r\n     * @param {*} id id for the text\r\n     * @param {*} content content of the tag\r\n     * @param {*} x x coordinate of the text\r\n     * @param {*} y y coordinate of the text\r\n     * @returns {any}\r\n     */\r\n     function text(id, content, x, y) {\r\n        let text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\r\n        text.setAttribute('id', id);\r\n        text.setAttribute('x', x);\r\n        text.setAttribute('y', y);\r\n        // Default value for delta: Circle radius * 1.5 (as a padding)\r\n        text.setAttribute('dx', circleRadius * 1.5);\r\n        text.setAttribute('dy', circleRadius * 1.5);\r\n        text.textContent = content;\r\n        return text;\r\n    }\r\n\r\n    /**\r\n     * Returns a circle tag with the given dimensions.\r\n     * @param {*} x x coordinate of the center\r\n     * @param {*} y y coordinate of the center\r\n     * @param {*} r radius\r\n     * @param {*} classes classes to add\r\n     * @param {*} id id of the circle\r\n     * @returns {any}\r\n     */\r\n    function circle(x, y, r, classes, id) {\r\n        let circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\r\n        circle.setAttribute('class', classes);\r\n        circle.setAttribute('id', id);\r\n        circle.setAttribute('cx', x);\r\n        circle.setAttribute('cy', y);\r\n        circle.setAttribute('r', r);\r\n        return circle;\r\n    }\r\n\r\n    /**\r\n     * Returns a path between two points.\r\n     * @param {*} x1 x coordinate of the first point\r\n     * @param {*} y1 y coordinate of the first point\r\n     * @param {*} x2 x coordinate of the second point\r\n     * @param {*} y2 y coordinate of the second point\r\n     * @param {*} classes CSS classes to set\r\n     * @param {*} id id of the path\r\n     * @returns {any}\r\n     */\r\n     function path(x1, y1, x2, y2, classes, id) {\r\n        let path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\r\n        path.setAttribute('class', classes);\r\n        path.setAttribute('id', id);\r\n        path.setAttribute('d', 'M ' + x1 + ' ' + y1 + ' L ' + x2 + ' ' + y2);\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * Returns a link around a given child element. This function also adds a title element next\r\n     * to the child for accessibility.\r\n     * @param {*} child child item to set the link on\r\n     * @param {*} id id of the link\r\n     * @param {*} title title of the link\r\n     * @param {*} text text to describe the link\r\n     * @returns {any}\r\n     */\r\n    function link(child, id, title = null, text = null) {\r\n        let link = document.createElementNS('http://www.w3.org/2000/svg', 'a');\r\n        link.setAttribute('id', id);\r\n        link.setAttribute('xlink:href', '');\r\n        link.appendChild(child);\r\n        if (title !== null) {\r\n            link.appendChild(title);\r\n        }\r\n        if (text !== null) {\r\n            link.appendChild(text);\r\n        }\r\n        return link;\r\n    }\r\n\r\n    /**\r\n     * Adds a place on the SVG map. This function also prepares the code for linking activities\r\n     * and adding titles (for accessibility).\r\n     * @param {*} event event causing the command\r\n     */\r\n    function addPlace(event) {\r\n        let placesgroup = document.getElementById('placesGroup');\r\n        let placeId = 'p' + placestore.getId();\r\n        let linkId = 'a' + placestore.getId();\r\n        var CTM = event.target.getScreenCTM();\r\n        if (event.touches) {\r\n            event = event.touches[0];\r\n        }\r\n        let cx = (event.clientX - CTM.e) / CTM.a;\r\n        let cy = (event.clientY - CTM.f) / CTM.d;\r\n        placesgroup.appendChild(\r\n            link(\r\n                circle(cx, cy, circleRadius, 'learningmap-place learningmap-draggable learningmap-emptyplace', placeId),\r\n                linkId,\r\n                title('title' + placeId),\r\n                text('text' + placeId, '', cx, cy)\r\n            )\r\n        );\r\n        placestore.addPlace(placeId, linkId);\r\n    }\r\n\r\n    /**\r\n     * Handles single clicks on the background image.\r\n     * @param {*} event click event\r\n     * @returns {void}\r\n     */\r\n    function clickHandler(event) {\r\n        event.preventDefault();\r\n        hideContextMenu();\r\n        hideAdvancedSettings();\r\n        if (event.target.classList.contains('learningmap-place') && selectedElement === null) {\r\n            if (firstPlace === null) {\r\n                firstPlace = event.target.id;\r\n                document.getElementById(firstPlace).classList.add('learningmap-selected');\r\n            } else {\r\n                secondPlace = event.target.id;\r\n                let fid = parseInt(firstPlace.replace('p', ''));\r\n                let sid = parseInt(secondPlace.replace('p', ''));\r\n                if (sid == fid) {\r\n                    return;\r\n                }\r\n                if (sid < fid) {\r\n                    let z = sid;\r\n                    sid = fid;\r\n                    fid = z;\r\n                }\r\n                addPath(fid, sid);\r\n                let first = document.getElementById(firstPlace);\r\n                if (first) {\r\n                    first.classList.remove('learningmap-selected');\r\n                }\r\n                firstPlace = null;\r\n                lastTarget = secondPlace;\r\n                secondPlace = null;\r\n            }\r\n        } else {\r\n            unselectAll();\r\n            firstPlace = null;\r\n        }\r\n    }\r\n    /**\r\n     * Removes the classes 'learningmap-selected' and 'learningmap-selectet-activity-selector'\r\n     * from all nodes\r\n     */\r\n    function unselectAll() {\r\n        Array.from(document.getElementsByClassName('learningmap-selected')).forEach(function(e) {\r\n            e.classList.remove('learningmap-selected');\r\n        });\r\n        Array.from(document.getElementsByClassName('learningmap-selected-activity-selector')).forEach(function(e) {\r\n            e.classList.remove('learningmap-selected-activity-selector');\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a path between two places.\r\n     * @param {number} fid id of the first place (meant to be the smaller one)\r\n     * @param {number} sid id of the second place (meant to be the bigger one)\r\n     */\r\n    function addPath(fid, sid) {\r\n        let pid = 'p' + fid + '_' + sid;\r\n        if (document.getElementById(pid) === null) {\r\n            let pathsgroup = document.getElementById('pathsGroup');\r\n            let first = document.getElementById('p' + fid);\r\n            let second = document.getElementById('p' + sid);\r\n            if (pathsgroup && first && second) {\r\n                pathsgroup.appendChild(\r\n                    path(\r\n                        first.cx.baseVal.value,\r\n                        first.cy.baseVal.value,\r\n                        second.cx.baseVal.value,\r\n                        second.cy.baseVal.value,\r\n                        'learningmap-path',\r\n                        pid\r\n                    )\r\n                );\r\n                placestore.addPath(pid, 'p' + fid, 'p' + sid);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes a place from the SVG and the placestore. This function also removes all\r\n     * touching paths and entries in statringplaces / targetplaces linking to the removed\r\n     * place.\r\n     * @param {any} event event causing the remove order\r\n     */\r\n    function removePlace(event) {\r\n        let place = document.getElementById(event.target.id);\r\n        let parent = place.parentNode;\r\n        removePathsTouchingPlace(event.target.id);\r\n        placestore.removePlace(event.target.id);\r\n        parent.removeChild(place);\r\n        parent.parentNode.removeChild(parent);\r\n\r\n        updateCode();\r\n    }\r\n\r\n    /**\r\n     * Removes all paths touching a certain place\r\n     * @param {number} id id of the place\r\n     */\r\n    function removePathsTouchingPlace(id) {\r\n        placestore.getTouchingPaths(id).forEach(\r\n            function(e) {\r\n                removePath(e.id);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Removes a path from the SVG and from the placestore\r\n     * @param {number} id id of the path\r\n     */\r\n    function removePath(id) {\r\n        let path = document.getElementById(id);\r\n        if (path !== null) {\r\n            path.parentNode.removeChild(path);\r\n            placestore.removePath(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the background image of the SVG to the current image in filemanager.\r\n     */\r\n    function refreshBackgroundImage() {\r\n        let previewimage = document.getElementsByClassName('realpreview');\r\n        if (previewimage.length > 0) {\r\n            let background = document.getElementById('learningmap-background-image');\r\n            let backgroundurl = previewimage[0].getAttribute('src').split('?')[0];\r\n            // If the uploaded file reuses the filename of a previously uploaded image, they differ\r\n            // only in the oid. So one has to append the oid to the url.\r\n            if (previewimage[0].getAttribute('src').split('?')[1].includes('&oid=')) {\r\n                backgroundurl += '?oid=' + previewimage[0].getAttribute('src').split('&oid=')[1];\r\n            }\r\n            background.setAttribute('xlink:href', backgroundurl);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds an eventListener to the background image for watching file changes and updating\r\n     * height and width of the image.\r\n     */\r\n    function registerBackgroundListener() {\r\n        let background = document.getElementById('learningmap-background-image');\r\n        if (background) {\r\n            background.addEventListener('load', function() {\r\n                background.removeAttribute('height');\r\n                let height = parseInt(background.getBBox().height);\r\n                let width = background.getBBox().width;\r\n                placestore.setBackgroundDimensions(width, height);\r\n                svg.setAttribute('viewBox', '0 0 ' + placestore.width + ' ' + placestore.height);\r\n                background.setAttribute('width', width);\r\n                background.setAttribute('height', height);\r\n                updateCode();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates CSS code inside the SVG (called, when one of the colors is changed).\r\n     * Calls updateCode() when completed.\r\n     */\r\n    function updateCSS() {\r\n        Templates.renderForPromise('mod_learningmap/cssskeleton', placestore.getPlacestore())\r\n            .then(({html, js}) => {\r\n                Templates.replaceNode('#learningmap-svgstyle', html, js);\r\n                updateCode();\r\n                return true;\r\n            })\r\n            .catch(ex => displayException(ex));\r\n    }\r\n\r\n    /**\r\n     * Updates the activity selector to highlight the activities already used\r\n     * and to show the alert for hidden activities.\r\n     */\r\n    function updateActivities() {\r\n        let activities = placestore.getAllActivities();\r\n        let options = Array.from(activitySelector.getElementsByTagName('option'));\r\n        activityHiddenWarning.setAttribute('hidden', '');\r\n        options.forEach(function(n) {\r\n            if (activities.includes(n.value)) {\r\n                n.classList.add('learningmap-used-activity');\r\n                if (n.selected) {\r\n                    if (n.getAttribute('data-activity-hidden') == true) {\r\n                        activityHiddenWarning.removeAttribute('hidden');\r\n                    }\r\n                }\r\n            } else {\r\n                n.classList.remove('learningmap-used-activity');\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds the event listener to the color chooser buttons.\r\n     * @param {*} name name of the color\r\n     * @param {*} secondValue name of a second placestore value that has to be changed along\r\n     */\r\n    function colorChooserLogic(name, secondValue = '') {\r\n        let colorChooser = document.getElementById('learningmap-color-' + name);\r\n        if (colorChooser) {\r\n            colorChooser.addEventListener('change', function() {\r\n                placestore.setColor(name, colorChooser.value);\r\n                if (secondValue != '') {\r\n                    placestore.setColor(secondValue, colorChooser.value);\r\n                }\r\n                updateCSS();\r\n            });\r\n            colorChooser.value = placestore.getColor(name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds the event listener to advanced settings menu items\r\n     * @param {*} name Name of the item\r\n     * @param {*} getCall Method of placestore to call to read value\r\n     * @param {*} setCall Method of placestore to call to save value\r\n     * @param {*} callback Additional callback after value is saved\r\n     */\r\n    function advancedSettingsLogic(name, getCall, setCall, callback = null) {\r\n        let settingItem = document.getElementById('learningmap-advanced-setting-' + name);\r\n        if (settingItem) {\r\n            settingItem.checked = getCall.call(placestore);\r\n            settingItem.addEventListener('change', function() {\r\n                setCall.call(placestore, settingItem.checked);\r\n                if (callback !== null) {\r\n                    callback();\r\n                }\r\n                updateCSS();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds missing text nodes\r\n     */\r\n    function fixPlaceLabels() {\r\n        let options = Array.from(activitySelector.getElementsByTagName('option'));\r\n        let places = placestore.getPlaces();\r\n        for (const place of places) {\r\n            if (document.getElementById('text' + place.id) === null) {\r\n                let content = '';\r\n                for (const option of options) {\r\n                    if (option.value == place.linkedActivity) {\r\n                        content = option.textContent;\r\n                        break;\r\n                    }\r\n                }\r\n                let placeNode = document.getElementById(place.id);\r\n                let textNode = text('text' + place.id, content, placeNode.cx.baseVal.value, placeNode.cy.baseVal.value);\r\n                placeNode.parentNode.appendChild(textNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hides the advanced settings menu.\r\n     */\r\n    function hideAdvancedSettings() {\r\n        let advancedSettings = document.getElementById('learningmap-advanced-settings');\r\n        advancedSettings.setAttribute('hidden', '');\r\n    }\r\n};\r\n"],"names":["targetPoints","pathTypes","offset","dragel","pathsToUpdateFirstPoint","pathsToUpdateSecondPoint","prefetchTemplates","selectedElement","firstPlace","secondPlace","lastTarget","elementForActivitySelector","touchstart","touchend","touchmove","mapdiv","document","getElementById","code","activitySetting","activitySelector","activityStarting","activityTarget","activityHiddenWarning","advancedSettingsIcon","treeView","querySelector","setAttribute","iconView","setTimeout","dispatchEvent","Event","addEventListener","setActivityId","value","text","textContent","title","classList","remove","add","updateActivities","updateCode","checked","addStartingPlace","removeStartingPlace","addTargetPlace","removeTargetPlace","placestoreInput","getElementsByName","loadJSON","advancedSettings","getAttribute","hideAdvancedSettings","removeAttribute","hideContextMenu","advancedSettingsClose","advancedSettingsLogic","placestore","getHidePaths","setHidePaths","getUseCheckmark","setUseCheckmark","getHover","setHover","getPulse","setPulse","getShowall","setShowall","getHideStroke","setHideStroke","getShowText","setShowText","options","Array","from","getElementsByTagName","places","getPlaces","place","id","content","option","linkedActivity","placeNode","textNode","cx","baseVal","cy","parentNode","appendChild","getSliceMode","setSliceMode","getShowWayGone","setShowWayGone","colorChooserLogic","innerHTML","refreshBackgroundImage","background","height","parseInt","getBBox","width","setBackgroundDimensions","svg","registerBackgroundListener","getMapid","showContextMenu","e","unselectAll","target","touches","contains","activityId","getActivityId","scalingFactor","clientWidth","style","setProperty","clientHeight","display","isStartingPlace","isTargetPlace","el","startDrag","drag","endDrag","evt","cancelable","preventDefault","nodeName","dblclickHandler","endTouch","getMousePosition","x","getAttributeNS","y","getPathsWithFid","getPathsWithSid","pathPoint","transformCoordinates","layerX","layerY","coord","dx","dy","setAttributeNS","updatePathDeclaration","forEach","path","pathNode","clickHandler","oldDefinition","targetX","targetY","targetP","parts","split","fromX","fromY","toX","toY","bezierX","bezierY","pathType","i","length","makeDraggable","updateCSS","backgroundfileNode","MutationObserver","observe","attributes","childList","subtree","clientX","clientY","CTM","getScreenCTM","a","f","d","JSON","stringify","getPlacestore","event","placesgroup","placeId","getId","linkId","child","link","createElementNS","r","classes","circle","addPlace","parent","getTouchingPaths","removePath","removePlace","removeChild","circleRadius","fid","replace","sid","z","pid","pathsgroup","first","second","x1","y1","x2","y2","addPath","getElementsByClassName","previewimage","backgroundurl","includes","renderForPromise","then","_ref","html","js","replaceNode","catch","ex","activities","getAllActivities","n","selected","name","secondValue","colorChooser","setColor","getColor","getCall","setCall","callback","settingItem","call"],"mappings":"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"}